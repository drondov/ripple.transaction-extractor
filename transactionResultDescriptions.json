{
    "tecCLAIM": "Unspecified failure, with transaction cost destroyed.",
    "tecCRYPTOCONDITION_ERROR": "This EscrowCreate or EscrowFinish transaction contained a malformed or mismatched crypto-condition.",
    "tecDIR_FULL": "The address sending the transaction cannot own any more objects in the ledger.",
    "tecDST_TAG_NEEDED": "The Payment transaction omitted a destination tag, but the destination account has the lsfRequireDestTag flag enabled. ",
    "tecFAILED_PROCESSING": "An unspecified error occurred when processing the transaction.",
    "tecFROZEN": "The OfferCreate transaction failed because one or both of the assets involved are subject to a global freeze.",
    "tecINSUF_RESERVE_LINE": "The transaction failed because the sending account does not have enough XRP to create a new trust line. (See: Reserves) This error occurs when the counterparty already has a trust line in a non-default state to the sending account for the same currency. (See tecNO_LINE_INSUF_RESERVE for the other case.)",
    "tecINSUF_RESERVE_OFFER": "The transaction failed because the sending account does not have enough XRP to create a new Offer. (See: Reserves)",
    "tecINSUFFICIENT_RESERVE": "The transaction would increase the reserve requirement higher than the sending account's balance. SignerListSet, PaymentChannelCreate, PaymentChannelFund, and EscrowCreate can return this error code. See SignerLists and Reserves for more information.",
    "tecINTERNAL": "Unspecified internal error, with transaction cost applied. This error code should not normally be returned. If you can reproduce this error, please report an issue.",
    "tecINVARIANT_FAILED": "An invariant check failed when trying to execute this transaction. Requires the EnforceInvariants amendment. If you can reproduce this error, please report an issue.",
    "tecNEED_MASTER_KEY": "This transaction tried to cause changes that require the master key, such as disabling the master key or giving up the ability to freeze balances. ",
    "tecNO_ALTERNATIVE_KEY": "The transaction tried to remove the only available method of authorizing transactions. This could be a SetRegularKey transaction to remove the regular key, a SignerListSet transaction to delete a SignerList, or an AccountSet transaction to disable the master key. (Prior to rippled 0.30.0, this was called tecMASTER_DISABLED.)",
    "tecNO_AUTH": "The transaction failed because it needs to add a balance on a trust line to an account with the lsfRequireAuth flag enabled, and that trust line has not been authorized. If the trust line does not exist at all, tecNO_LINE occurs instead.",
    "tecNO_DST": "The account on the receiving end of the transaction does not exist. This includes Payment and TrustSet transaction types. (It could be created if it received enough XRP.)",
    "tecNO_DST_INSUF_XRP": "The account on the receiving end of the transaction does not exist, and the transaction is not sending enough XRP to create it.",
    "tecNO_ENTRY": "Reserved for future use.",
    "tecNO_ISSUER": "The account specified in the issuer field of a currency amount does not exist.",
    "tecNO_LINE": "The TakerPays field of the OfferCreate transaction specifies an asset whose issuer has lsfRequireAuth enabled, and the account making the offer does not have a trust line for that asset. (Normally, making an offer implicitly creates a trust line if necessary, but in this case it does not bother because you cannot hold the asset without authorization.) If the trust line exists, but is not authorized, tecNO_AUTH occurs instead.",
    "tecNO_LINE_INSUF_RESERVE": "The transaction failed because the sending account does not have enough XRP to create a new trust line. (See: Reserves) This error occurs when the counterparty does not have a trust line to this account for the same currency. (See tecINSUF_RESERVE_LINE for the other case.)",
    "tecNO_LINE_REDUNDANT": "The transaction failed because it tried to set a trust line to its default state, but the trust line did not exist.",
    "tecNO_PERMISSION": "The sender does not have permission to do this operation. For example, the EscrowFinish transaction tried to release a held payment before its FinishAfter time, or someone tried to use PaymentChannelFund on a channel the sender does not own.",
    "tecNO_REGULAR_KEY": "The AccountSet transaction tried to disable the master key, but the account does not have another way to authorize transactions. If multi-signing is enabled, this code is deprecated and tecNO_ALTERNATIVE_KEY is used instead.",
    "tecNO_TARGET": "The transaction referenced an Escrow or PayChannel ledger object that doesn't exist, either because it never existed or it has already been deleted. (For example, another EscrowFinish transaction has already executed the held payment.) Alternatively, the destination account has asfDisallowXRP set so it cannot be the destination of this PaymentChannelCreate or EscrowCreate transaction.",
    "tecOVERSIZE": "This transaction could not be processed, because the server created an excessively large amount of metadata when it tried to apply the transaction. ",
    "tecOWNERS": "The transaction requires that account sending it has a nonzero \"owners count\", so the transaction cannot succeed. For example, an account cannot enable the lsfRequireAuth flag if it has any trust lines or available offers.",
    "tecPATH_DRY": "The transaction failed because the provided paths did not have enough liquidity to send anything at all. This could mean that the source and destination accounts are not linked by trust lines.",
    "tecPATH_PARTIAL": "The transaction failed because the provided paths did not have enough liquidity to send the full amount.",
    "tecUNFUNDED": "The transaction failed because the account does not hold enough XRP to pay the amount in the transaction and satisfy the additional reserve necessary to execute this transaction. (See: Reserves)",
    "tecUNFUNDED_ADD": "DEPRECATED.",
    "tecUNFUNDED_PAYMENT": "The transaction failed because the sending account is trying to send more XRP than it holds, not counting the reserve. (See: Reserves)",
    "tecUNFUNDED_OFFER": "The OfferCreate transaction failed because the account creating the offer does not have any of the TakerGets currency.",
    "telBAD_DOMAIN": "The transaction specified a domain value (for example, the Domain field of an AccountSet transaction) that cannot be used, probably because it is too long to store in the ledger.",
    "telBAD_PATH_COUNT": "The transaction contains too many paths for the local server to process.",
    "telBAD_PUBLIC_KEY": "The transaction specified a public key value (for example, as the MessageKey field of an AccountSet transaction) that cannot be used, probably because it is too long.",
    "telCAN_NOT_QUEUE": "The transaction did not meet the open ledger cost, but this server did not queue this transaction because it did not meet the queuing restrictions. For example, a transaction returns this code when the sender already has 10 other transactions in the queue. You can try again later or sign and submit a replacement transaction with a higher transaction cost in the Fee field.",
    "telCAN_NOT_QUEUE_BALANCE": "The transaction did not meet the open ledger cost and also was not added to the transaction queue because the sum of potential XRP costs of already-queued transactions is greater than the expected balance of the account. You can try again later, or try submitting to a different server. ",
    "telCAN_NOT_QUEUE_BLOCKS": "The transaction did not meet the open ledger cost and also was not added to the transaction queue. This transaction could not replace an existing transaction in the queue because it would block already-queued transactions from the same sender by changing authorization methods. (This includes all SetRegularKey and SignerListSet transactions, as well as AccountSet transactions that change the RequireAuth/OptionalAuth, DisableMaster, or AccountTxnID flags.) You can try again later, or try submitting to a different server. ",
    "telCAN_NOT_QUEUE_BLOCKED": "The transaction did not meet the open ledger cost and also was not added to the transaction queue because a transaction queued ahead of it from the same sender blocks it. (This includes all SetRegularKey and SignerListSet transactions, as well as AccountSet transactions that change the RequireAuth/OptionalAuth, DisableMaster, or AccountTxnID flags.) You can try again later, or try submitting to a different server. ",
    "telCAN_NOT_QUEUE_FEE": "The transaction did not meet the open ledger cost and also was not added to the transaction queue. This code occurs when a transaction with the same sender and sequence number already exists in the queue and the new one does not pay a large enough transaction cost to replace the existing transaction. To replace a transaction in the queue, the new transaction must have a Fee value that is at least 25% more, as measured in fee levels. You can increase the Fee and try again, send this with a higher Sequence number so it doesn't replace an existing transaction, or try sending to another server. ",
    "telCAN_NOT_QUEUE_FULL": "The transaction did not meet the open ledger cost and the server did not queue this transaction because this server's transaction queue is full. You could increase the Fee and try again, try again later, or try submitting to a different server. The new transaction must have a higher transaction cost, as measured in fee levels, than the transaction in the queue with the smallest transaction cost. ",
    "telFAILED_PROCESSING": "An unspecified error occurred when processing the transaction.",
    "telINSUF_FEE_P": "The Fee from the transaction is not high enough to meet the server's current transaction cost requirement, which is derived from its load level.",
    "telLOCAL_ERROR": "Unspecified local error.",
    "telNO_DST_PARTIAL": "The transaction is an XRP payment that would fund a new account, but the tfPartialPayment flag was enabled. This is disallowed.",
    "terFUNDS_SPENT": "DEPRECATED.",
    "terINSUF_FEE_B": "The account sending the transaction does not have enough XRP to pay the Fee specified in the transaction.",
    "terLAST": "Used internally only. This code should never be returned.",
    "terNO_ACCOUNT": "The address sending the transaction is not funded in the ledger (yet).",
    "terNO_AUTH": "The transaction would involve adding currency issued by an account with lsfRequireAuth enabled to a trust line that is not authorized. For example, you placed an offer to buy a currency you aren't authorized to hold.",
    "terNO_LINE": "Used internally only. This code should never be returned.",
    "terNO_RIPPLE": "Used internally only. This code should never be returned.",
    "terOWNERS": "The transaction requires that account sending it has a nonzero \"owners count\", so the transaction cannot succeed. For example, an account cannot enable the lsfRequireAuth flag if it has any trust lines or available offers.",
    "terPRE_SEQ": "The Sequence number of the current transaction is higher than the current sequence number of the account sending the transaction.",
    "terRETRY": "Unspecified retriable error.",
    "terQUEUED": "The transaction met the load-scaled transaction cost but did not meet the open ledger requirement, so the transaction has been queued for a future ledger.",
    "temBAD_AMOUNT": "An amount specified by the transaction (for example the destination Amount or SendMax values of a Payment) was invalid, possibly because it was a negative number.",
    "temBAD_AUTH_MASTER": "The key used to sign this transaction does not match the master key for the account sending it, and the account does not have a Regular Key set.",
    "temBAD_CURRENCY": "The transaction improperly specified a currency field. See Specifying Currency Amounts for the correct format.",
    "temBAD_EXPIRATION": "The transaction improperly specified an expiration value, for example as part of an OfferCreate transaction. Alternatively, the transaction did not specify a required expiration value, for example as part of an EscrowCreate transaction.",
    "temBAD_FEE": "The transaction improperly specified its Fee value, for example by listing a non-XRP currency or some negative amount of XRP.",
    "temBAD_ISSUER": "The transaction improperly specified the issuer field of some currency included in the request.",
    "temBAD_LIMIT": "The TrustSet transaction improperly specified the LimitAmount value of a trustline.",
    "temBAD_OFFER": "The OfferCreate transaction specifies an invalid offer, such as offering to trade XRP for itself, or offering a negative amount.",
    "temBAD_PATH": "The Payment transaction specifies one or more Paths improperly, for example including an issuer for XRP, or specifying an account differently.",
    "temBAD_PATH_LOOP": "One of the Paths in the Payment transaction was flagged as a loop, so it cannot be processed in a bounded amount of time.",
    "temBAD_SEND_XRP_LIMIT": "The Payment transaction used the tfLimitQuality flag in a direct XRP-to-XRP payment, even though XRP-to-XRP payments do not involve any conversions.",
    "temBAD_SEND_XRP_MAX": "The Payment transaction included a SendMax field in a direct XRP-to-XRP payment, even though sending XRP should never require SendMax. (XRP is only valid in SendMax if the destination Amount is not XRP.)",
    "temBAD_SEND_XRP_NO_DIRECT": "The Payment transaction used the tfNoDirectRipple flag for a direct XRP-to-XRP payment, even though XRP-to-XRP payments are always direct.",
    "temBAD_SEND_XRP_PARTIAL": "The Payment transaction used the tfPartialPayment flag for a direct XRP-to-XRP payment, even though XRP-to-XRP payments should always deliver the full amount.",
    "temBAD_SEND_XRP_PATHS": "The Payment transaction included Paths while sending XRP, even though XRP-to-XRP payments should always be direct.",
    "temBAD_SEQUENCE": "The transaction is references a sequence number that is higher than its own Sequence number, for example trying to cancel an offer that would have to be placed after the transaction that cancels it.",
    "temBAD_SIGNATURE": "The signature to authorize this transaction is either missing, or formed in a way that is not a properly-formed signature. (See tecNO_PERMISSION for the case where the signature is properly formed, but not authorized for this account.)",
    "temBAD_SRC_ACCOUNT": "The Account on whose behalf this transaction is being sent (the \"source account\") is not a properly-formed account address.",
    "temBAD_TRANSFER_RATE": "The TransferRate field of an AccountSet transaction is not properly formatted or out of the acceptable range.",
    "temDST_IS_SRC": "The TrustSet transaction improperly specified the destination of the trust line (the issuer field of LimitAmount) as the Account sending the transaction. You cannot extend a trust line to yourself. (In the future, this code could also apply to other cases where the destination of a transaction is not allowed to be the account sending it.)",
    "temDST_NEEDED": "The transaction improperly omitted a destination. This could be the Destination field of a Payment transaction, or the issuer sub-field of the LimitAmount field fo a TrustSet transaction.",
    "temINVALID": "The transaction is otherwise invalid. For example, the transaction ID may not be the right format, the signature may not be formed properly, or something else went wrong in understanding the transaction.",
    "temINVALID_FLAG": "The transaction includes a Flag that does not exist, or includes a contradictory combination of flags.",
    "temMALFORMED": "Unspecified problem with the format of the transaction.",
    "temREDUNDANT": "The transaction would do nothing; for example, it is sending a payment directly to the sending account, or creating an offer to buy and sell the same currency from the same issuer.",
    "temREDUNDANT_SEND_MAX": "",
    "temRIPPLE_EMPTY": "The Payment transaction includes an empty Paths field, but paths are necessary to complete this payment.",
    "temBAD_WEIGHT": "The SignerListSet transaction includes a SignerWeight that is invalid, for example a zero or negative value.",
    "temBAD_SIGNER": "The SignerListSet transaction includes a signer who is invalid. For example, there may be duplicate entries, or the owner of the SignerList may also be a member.",
    "temBAD_QUORUM": "The SignerListSet transaction has an invalid SignerQuorum value. Either the value is not greater than zero, or it is more than the sum of all signers in the list.",
    "temUNCERTAIN": "Used internally only. This code should never be returned.",
    "temUNKNOWN": "Used internally only. This code should never be returned.",
    "temDISABLED": "The transaction requires logic that is disabled. Typically this means you are trying to use an amendment that is not enabled for the current ledger."
  }